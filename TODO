
- add some error handling when user tries to log in with invalid + non-existing credentials

- actually just about all error handling on client side as well

- on client side, do not allow user to access AddPostPage without signing in first 
    (look into react router - is there a common pattern used when using with react router?)

- clicking submit button of sign in / sign up page closes the dialog right away. (which shouldn't)
maybe because the state changes when user's sign in / sign up request is successful so the dialog is re-rendered with initial state? 
   
- architect the redux state
    How to do I go about editing a post? 
https://github.com/reactjs/redux/issues/1385,)

- when logging in with email, if user signed up using his/her gmail account, 
let user just sign in with the google account instead


Process:
- combining component code with connect code onto one file -> DONE

- add user Settings (
		edit username - async validation.)
			1. instead of 'sign out', now just put some iconMenu to show 'settings' or 'sign out' option
			2. make a setting page that resembles some form to change username (async validation)
			3. hook up 

- add edit post functionality
- add remove post functionality
- rename subdir_url --> basename
- add validation for:
	+ login
	+ signup
	+ post fetching
	+ post creation
	+ post edit
	+ post removal
	( redux form ? async validation )


Stuff to consider doing (learned from Real World Example):
- combine connect with actual react components on the same page
- change string concatenation syntax to ES6 one (ex: fullName + " is cool " --> `${fullName} is cool`)
- make a custom middleware for handling api calls. so no action creator will actually be individually making api calls, it will just return some action type that is to be interpreted by the middleware. (actually this is really only useful if we are making several api calls to different resources??? - TBD)
[
State:

entities: // original resource representation returned by the api? or something like that
	users // user cache
	repos // repo cache
pagination:
	starredByUser:
		[user1]:
			isFetching
		  nextPageUrl
		  ids // of repo names
		  [pageCount]
		 [user2]:
		 		...
	stargazersByRepo:
		[repo1]	
			isFetching
			nextPageUrl
			ids // of users
			[pageCount]
		[repo2]
			...
errorMessage: 
routing:


]


